name: CI

permissions:
  contents: read

on:
  pull_request:
  push:
    branches:
    - main

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always
  CLICOLOR: 1

concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  ci:
    permissions:
      contents: none
    name: CI
    needs: [test, msrv, lockfile, rustfmt, clippy]
    runs-on: ubuntu-latest
    if: "always()"
    steps:
      - name: Failed
        run: exit 1
        if: "contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled') || contains(needs.*.result, 'skipped')"
  test:
    name: Test
    strategy:
      matrix:
        os: ["ubuntu-latest", "windows-latest", "macos-latest"]
        rust: ["stable"]
    continue-on-error: ${{ matrix.rust != 'stable' }}
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}
    - uses: Swatinem/rust-cache@v2
    - uses: taiki-e/install-action@cargo-hack
    - name: Build
      run: cargo test --workspace --no-run
    - name: Test (non-Windows)
      if: matrix.os != 'windows-latest'
      run: cargo hack test --each-feature --workspace
    - name: Test (Windows - skip fastembed features)
      if: matrix.os == 'windows-latest'
      run: cargo hack test --each-feature --workspace --exclude-features fastembed
  msrv:
    name: "Check MSRV"
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
    - uses: Swatinem/rust-cache@v2
    - uses: taiki-e/install-action@cargo-hack
    - name: Default features
      run: cargo hack check --each-feature --locked --rust-version --ignore-private --workspace --all-targets --keep-going
  minimal-versions:
    name: Minimal versions
    # Temporarily disabled due to issue building sharded-slab in CI
    if: false
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Install stable Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
    - name: Install nightly Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: nightly
    - name: Downgrade dependencies to minimal versions
      run: cargo +nightly generate-lockfile -Z minimal-versions
    - name: Compile with minimal versions
      run: cargo +stable check --workspace --all-features --locked --keep-going
  lockfile:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
    - uses: Swatinem/rust-cache@v2
    - name: "Is lockfile updated?"
      run: cargo update --workspace --locked
  rustfmt:
    name: rustfmt
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: "1.89"  # STABLE
        components: rustfmt
    - uses: Swatinem/rust-cache@v2
    - name: Check formatting
      run: cargo fmt --all -- --check
  clippy:
    name: clippy
    runs-on: ubuntu-latest
    permissions:
      security-events: write # to upload sarif results
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: "1.89"  # STABLE
        components: clippy
    - uses: Swatinem/rust-cache@v2
    - name: Install SARIF tools
      run: cargo install clippy-sarif --locked
    - name: Install SARIF tools
      run: cargo install sarif-fmt --locked
    - name: Check
      run: >
        cargo clippy --workspace --all-features --all-targets --message-format=json
        | clippy-sarif
        | tee clippy-results.sarif
        | sarif-fmt
      continue-on-error: true
    - name: Upload
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: clippy-results.sarif
        wait-for-processing: true
    - name: Report status
      run: cargo clippy --workspace --all-features --all-targets --keep-going -- -D warnings
  publish-crates:
    name: Publish crates.io packages
    needs: [test, msrv, lockfile, rustfmt, clippy]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    - name: Publish crates
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
      run: |
        set -euo pipefail

        publish_crate() {
          local package=$1
          local max_attempts=5
          local wait_time=30

          echo "Publishing $package..."

          for attempt in $(seq 1 $max_attempts); do
            echo "Attempt $attempt/$max_attempts for $package"

            if cargo publish -p "$package" --token "$CARGO_REGISTRY_TOKEN" 2>&1 | tee /tmp/publish_output.txt; then
              echo "Successfully published $package"
              return 0
            fi

            if grep -q "already uploaded" /tmp/publish_output.txt || \
               grep -q "already exists" /tmp/publish_output.txt; then
              echo "$package is already published, continuing..."
              return 0
            fi

            if grep -q "failed to select a version" /tmp/publish_output.txt; then
              echo "Dependency not yet available, waiting ${wait_time}s before retry..."
              sleep $wait_time
              wait_time=$((wait_time * 2))
            else
              echo "Publishing $package failed with unexpected error"
              cat /tmp/publish_output.txt
              return 1
            fi
          done

          echo "Failed to publish $package after $max_attempts attempts"
          return 1
        }

        verify_crate() {
          local package=$1
          local version=$2
          local max_attempts=20
          local wait_time=30
          local url="https://crates.io/api/v1/crates/${package}/${version}"

          echo "Verifying $package v$version is available on crates.io..."

          for attempt in $(seq 1 $max_attempts); do
            if curl --silent --show-error --fail "$url" >/dev/null; then
              echo "$package v$version verified on crates.io"
              return 0
            fi

            echo "Waiting for $package v$version to be available (attempt $attempt/$max_attempts)..."
            sleep $wait_time
          done

          echo "Failed to verify $package v$version on crates.io"
          curl --silent --show-error "$url" || true
          return 1
        }

        VERSION=$(grep -m1 '^version = ' Cargo.toml | sed 's/.*"\(.*\)".*/\1/')
        echo "Publishing version $VERSION"

        CRATES=(
          "ck-core"
          "ck-models"
          "ck-embed"
          "ck-chunk"
          "ck-ann"
          "ck-index"
          "ck-engine"
          "ck-search"
        )

        for crate in "${CRATES[@]}"; do
          if ! publish_crate "$crate"; then
            echo "Failed to publish $crate, aborting..."
            exit 1
          fi

          if ! verify_crate "$crate" "$VERSION"; then
            echo "Failed to verify $crate, aborting..."
            exit 1
          fi
        done

        echo "All crates published successfully!"
