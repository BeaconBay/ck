name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        default: 'v0.3.4'

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux x86_64
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            artifact_name: ck
            asset_name: ck-linux-x86_64
          
          # Linux ARM64
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            artifact_name: ck
            asset_name: ck-linux-aarch64
          
          # macOS x86_64
          - target: x86_64-apple-darwin
            os: macos-latest
            artifact_name: ck
            asset_name: ck-macos-x86_64
          
          # macOS ARM64 (Apple Silicon)
          - target: aarch64-apple-darwin
            os: macos-latest
            artifact_name: ck
            asset_name: ck-macos-aarch64
          
          # Windows x86_64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            artifact_name: ck.exe
            asset_name: ck-windows-x86_64.exe

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross for cross-compilation (Linux ARM64)
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: cargo install cross --git https://github.com/cross-rs/cross

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.target }}-cargo-

    - name: Build release binary
      run: |
        if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
          cross build --release --target ${{ matrix.target }} --bin ck
        else
          cargo build --release --target ${{ matrix.target }} --bin ck
        fi

    - name: Strip binary (Unix)
      if: matrix.os != 'windows-latest'
      run: strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

    - name: Create tarball (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd target/${{ matrix.target }}/release
        tar -czf ${{ matrix.asset_name }}.tar.gz ${{ matrix.artifact_name }}
        mv ${{ matrix.asset_name }}.tar.gz ../../../

    - name: Create zip (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd target/${{ matrix.target }}/release
        7z a ${{ matrix.asset_name }}.zip ${{ matrix.artifact_name }}
        mv ${{ matrix.asset_name }}.zip ../../../

    - name: Upload artifact (Unix)
      if: matrix.os != 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: ${{ matrix.asset_name }}.tar.gz

    - name: Upload artifact (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: ${{ matrix.asset_name }}.zip

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Get tag name
      id: tag_name
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
        else
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: List artifacts
      run: ls -la artifacts/

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag_name.outputs.tag }}
        release_name: ck ${{ steps.tag_name.outputs.tag }}
        body: |
          ## ck ${{ steps.tag_name.outputs.tag }}
          
          üîç **Semantic Grep by Embedding** - Find code by meaning, not just keywords.
          
          ### üöÄ What's New in this Release
          
          - ‚úÖ Complete Haskell support with tree-sitter parsing
          - ‚úÖ Expanded file extension support for more languages  
          - ‚úÖ Enhanced debugging with `--inspect` tool
          - ‚úÖ Improved language support documentation
          
          ### üì¶ Installation
          
          **Via Cargo:**
          ```bash
          cargo install ck-search
          ```
          
          **Download Binary:**
          Choose your platform below, extract the archive, and place the binary in your PATH.
          
          ### üåç Supported Platforms
          
          - **Linux**: x86_64, ARM64
          - **macOS**: x86_64, ARM64 (Apple Silicon)
          - **Windows**: x86_64
          
          ### üîç Quick Start
          
          ```bash
          # Index your project
          ck --index .
          
          # Semantic search
          ck --sem "error handling" src/
          ck --sem "database connection" .
          
          # Traditional grep-compatible search
          ck -r "TODO|FIXME" .
          ```
          
          Full documentation available at: https://github.com/BeaconBay/ck
        draft: false
        prerelease: false

    # Upload all platform binaries
    - name: Upload Linux x86_64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/ck-linux-x86_64/ck-linux-x86_64.tar.gz
        asset_name: ck-linux-x86_64.tar.gz
        asset_content_type: application/gzip

    - name: Upload Linux ARM64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/ck-linux-aarch64/ck-linux-aarch64.tar.gz
        asset_name: ck-linux-aarch64.tar.gz
        asset_content_type: application/gzip

    - name: Upload macOS x86_64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/ck-macos-x86_64/ck-macos-x86_64.tar.gz
        asset_name: ck-macos-x86_64.tar.gz
        asset_content_type: application/gzip

    - name: Upload macOS ARM64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/ck-macos-aarch64/ck-macos-aarch64.tar.gz
        asset_name: ck-macos-aarch64.tar.gz
        asset_content_type: application/gzip

    - name: Upload Windows x86_64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/ck-windows-x86_64/ck-windows-x86_64.exe.zip
        asset_name: ck-windows-x86_64.zip
        asset_content_type: application/zip